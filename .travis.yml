#if: tag IS present

os: linux
dist: bionic
language: minimal

# Travis limits run time to 50 min. As it may be too short, we define 3 stages
jobs:
  include:
    - stage: stage1
      name: "Setup Env."
      script: skip
      after_success: skip
    - allow_failures:
      stage: stage2
      name: "Dummy cache-filling build"
    - stage: stage3
      name: "Build"

# We maintain a manual cache to allow us to cache selected files
# and to restore files that would requires sudo access.
# Travis use environment to define cache key. Thus, our manual
# cache configuration, also define the instance of cache we use.
cache:
  directories:
  - /home/travis/.vagrant.d/boxes
  - $MANUAL_CACHE_DIR
  timeout: 180
env:
  global: 
    - MANUAL_CACHE_DIR=$HOME/mycache
    - MANUAL_CACHE_SRC="/var/lib/libvirt/images/apt-cacher-ng-data.qcow2 /var/lib/libvirt/images/tails-website-cache.qcow2"
      # We dont cache the followings
      # /var/lib/libvirt/images/tails-builder*.img

addons:
  apt:
    update: true
    packages:
     - psmisc
     - git
     - rake
     - libvirt-daemon-system
     - dnsmasq-base
     - ebtables
     - qemu-system-x86
     - qemu-utils
     - vagrant
     - vagrant-libvirt
     - vmdebootstrap

before_install:
 # We setup Set Environment vars ourself, as defining them in
 # Travis configuration may end using a different cache, which
 # would completely defeat its purpose.
 - export TAILS_ORIGIN=https://salsa.debian.org/tails-team/tails/
 - export TAILS_VERSION="4.6 -b 4.6"
 - export ARTIFACTS=".."
 # Remove travis overides
 - unset GEM_PATH GEM_HOME
 - for group in kvm libvirt libvirt-qemu; do
     sudo adduser "$(whoami)" "$group";
   done
 # Give vagrant-libvirt permission to read our $HOME & .ssh
 - sudo chmod 755 $HOME ; sudo chmod -R 755 $HOME/.ssh
 - sudo adduser libvirt-qemu "$(id -gn)"
 - sudo systemctl restart libvirtd
 # Had swap and other (sub) optims
 - sudo fallocate -l 24G /swap; sudo mkswap /swap; sudo swapon /swap
 - sudo mount -o remount,noatime /
 - export TAILS_BUILD_OPTIONS="$TAILS_BUILD_OPTIONS ram"
 # Restore our manual cache
 - for x in $MANUAL_CACHE_DIR/*.tar; do
     test -f "$x" && sudo tar -C / -xvf "$x";
   done || true
# Allow to cache website anyway
 - patch <allow-force-website-cache.patch Rakefile
 - export TAILS_BUILD_OPTIONS="$TAILS_BUILD_OPTIONS ignorechanges cachewebsite=force"

install:
 - git clone --recurse-submodules -j8 $TAILS_ORIGIN
 - cd tails; git checkout $TAILS_VERSION
 # We use sudo su $(whoami) to use added groups
 - sudo su "$(whoami)" -c "rake basebox:clean_old"
 - sudo su "$(whoami)" -c "rake basebox:create"
 - sudo su "$(whoami)" -c "rake vm:up"
 - echo "df -h" | sudo su "$(whoami)" -c "rake vm:ssh"

script:
 # We dance to make travis happy \o/ while we output nothing
 # Travis provide travis_wait for that, but wont show log if stopped
 # Note that the following commands are in fact concatenated
 # - while sleep 300; do echo "Staying aliiiveeeee"; done &
 #    timeout 2400 sudo su "$(whoami)" -c "rake build";
 #  kill %1
 - export TAILS_BUILD_OPTIONS="$TAILS_BUILD_OPTIONS ignorechanges"
 - travis_wait 40 timeout 2400 sudo su "$(whoami)" -c "rake build"

before_cache:
 - sudo su "$(whoami)" -c "rake vm:destroy"
 - for x in "$MANUAL_CACHE_SRC"; do
     sudo tar -cf "$MANUAL_CACHE_DIR/$(basename $x).tar" "$x";
   done
 - ls -lah $MANUAL_CACHE_DIR

after_success:
 - sha256sum $ARTIFACTS/*.img
 - sha256sum $ARTIFACTS/*.iso
